name: Enhanced CI/CD with Gemini Integration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'mcp-server/**'
      - 'package.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: 'false'
        type: boolean
      deployment_target:
        description: 'Deployment target'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'
  LOG_LEVEL: 'info'

jobs:
  setup-and-lint:
    name: Setup & Code Quality
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Log workflow context
        run: |
          echo "🔍 Workflow Context Analysis"
          echo "================================"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Workflow Run ID: ${{ github.run_id }}"
          echo "Workflow Run Number: ${{ github.run_number }}"
          echo "Triggered by: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR Number: ${{ github.event.pull_request.number }}"
            echo "PR Title: ${{ github.event.pull_request.title }}"
            echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
            echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          fi
          echo "================================"

      - name: 🔍 Analyze file changes
        id: changes
        run: |
          echo "📁 Analyzing changed files..."
          
          # Initialize change tracking
          has_src_changes=false
          has_workflow_changes=false
          has_config_changes=false
          has_docs_changes=false
          should_deploy=false
          
          # Get list of changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          else
            changed_files=""
          fi
          
          echo "Changed files:"
          echo "$changed_files" | while read file; do
            if [[ -n "$file" ]]; then
              echo "  📄 $file"
              
              # Check file categories
              case "$file" in
                src/*|mcp-server/*|scripts/*)
                  has_src_changes=true
                  should_deploy=true
                  ;;
                .github/workflows/*)
                  has_workflow_changes=true
                  ;;
                package.json|requirements*.txt|.gemini/*)
                  has_config_changes=true
                  should_deploy=true
                  ;;
                *.md|docs/*)
                  has_docs_changes=true
                  ;;
              esac
            fi
          done
          
          # Set outputs
          echo "has-src-changes=$has_src_changes" >> $GITHUB_OUTPUT
          echo "has-workflow-changes=$has_workflow_changes" >> $GITHUB_OUTPUT
          echo "has-config-changes=$has_config_changes" >> $GITHUB_OUTPUT
          echo "has-docs-changes=$has_docs_changes" >> $GITHUB_OUTPUT
          echo "should-deploy=$should_deploy" >> $GITHUB_OUTPUT
          
          echo "📊 Change Analysis Results:"
          echo "  Source changes: $has_src_changes"
          echo "  Workflow changes: $has_workflow_changes"
          echo "  Config changes: $has_config_changes"
          echo "  Documentation changes: $has_docs_changes"
          echo "  Should deploy: $should_deploy"

      - name: 📋 Extract version info
        id: version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "📦 Project version: $version"

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          echo "📦 Installing Node.js dependencies..."
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Lint code
        run: |
          echo "🔍 Running ESLint..."
          npm run lint > lint-results.txt 2>&1 || echo "Linting completed with issues"
          
          echo "📊 Lint Results Summary:"
          echo "========================"
          if grep -q "error" lint-results.txt; then
            echo "❌ Errors found:"
            grep "error" lint-results.txt | head -10
          fi
          if grep -q "warning" lint-results.txt; then
            echo "⚠️ Warnings found:"
            grep "warning" lint-results.txt | head -10
          fi
          
          # Show full results in expandable section
          echo "::group::📋 Full Lint Results"
          cat lint-results.txt
          echo "::endgroup::"

      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.run_number }}
          path: lint-results.txt
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup-and-lint
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run ${{ matrix.test-type }} tests
        id: test
        run: |
          echo "🧪 Running ${{ matrix.test-type }} tests..."
          
          # Set test command based on type
          if [[ "${{ matrix.test-type }}" == "unit" ]]; then
            test_cmd="npm run test:unit"
          else
            test_cmd="npm run test:integration"
          fi
          
          # Run tests with detailed logging
          $test_cmd > test-results-${{ matrix.test-type }}.txt 2>&1 || echo "Tests completed with issues"
          
          echo "📊 Test Results Summary:"
          echo "========================"
          
          # Extract test summary
          if grep -q "Tests:" test-results-${{ matrix.test-type }}.txt; then
            grep "Tests:" test-results-${{ matrix.test-type }}.txt
          fi
          if grep -q "Suites:" test-results-${{ matrix.test-type }}.txt; then
            grep "Suites:" test-results-${{ matrix.test-type }}.txt
          fi
          
          echo "::group::📋 Full Test Results"
          cat test-results-${{ matrix.test-type }}.txt
          echo "::endgroup::"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.run_number }}
          path: test-results-${{ matrix.test-type }}.txt
          retention-days: 7

  gemini-code-review:
    name: Gemini AI Code Review
    runs-on: ubuntu-latest
    needs: setup-and-lint
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🤖 Enhanced Gemini Code Review
        uses: truongnh1992/gemini-ai-code-reviewer@v6.5.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: "gemini-2.0-flash-exp"
          INPUT_EXCLUDE: "node_modules,dist,build,coverage,.git,*.min.js,package-lock.json"
          INPUT_INCLUDE: "src,scripts,mcp-server,tests,.github/workflows"

      - name: 📊 Log review completion
        run: |
          echo "🤖 Gemini Code Review Completed"
          echo "==============================="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Model Used: gemini-2.0-flash-exp"
          echo "Review Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Files Reviewed: Source code and configuration files"
          echo "Review Status: ✅ Completed successfully"

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: setup-and-lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Security vulnerability scan
        run: |
          echo "🔒 Running security analysis..."
          
          # Check for hardcoded secrets
          echo "🔍 Scanning for potential secrets..."
          secrets_found=false
          
          # Common secret patterns
          if grep -r -i --include="*.js" --include="*.ts" --include="*.py" \
             -E "(api[_-]?key|secret|password|token)" src/ scripts/ mcp-server/ 2>/dev/null | \
             grep -v -E "(process\.env|config\.|\.env|example|placeholder|your_|test_)" | head -5; then
            secrets_found=true
          fi
          
          # Check npm audit
          echo "🔍 Running npm security audit..."
          npm audit --audit-level=moderate > security-audit.txt 2>&1 || echo "Audit completed with findings"
          
          echo "📊 Security Scan Results:"
          echo "========================="
          if [[ "$secrets_found" == "true" ]]; then
            echo "⚠️ Potential hardcoded secrets found - please review"
          else
            echo "✅ No obvious hardcoded secrets detected"
          fi
          
          echo "::group::📋 NPM Audit Results"
          cat security-audit.txt
          echo "::endgroup::"

      - name: 📊 Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ github.run_number }}
          path: security-audit.txt
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup-and-lint, test]
    if: always() && (needs.setup-and-lint.result == 'success')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building application..."
          npm run build
          echo "✅ Build completed successfully"
          
          # Log build artifacts
          echo "📁 Build artifacts:"
          if [[ -d "dist" ]]; then
            find dist -type f | head -10
          fi

  update-readme:
    name: Auto-update README
    runs-on: ubuntu-latest
    needs: [setup-and-lint, build]
    if: >
      always() && 
      needs.setup-and-lint.result == 'success' && 
      (github.event_name == 'release' || 
       (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
       needs.setup-and-lint.outputs.should-deploy == 'true')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update README with latest info
        run: |
          echo "📝 Updating README with latest information..."
          
          # Update last updated date
          current_date=$(date -u +"%B %d, %Y")
          
          # Create backup
          cp README.md README.md.backup
          
          # Update version badge if present
          if grep -q "version-.*-blue" README.md; then
            sed -i "s/version-.*-blue/version-${{ needs.setup-and-lint.outputs.version }}-blue/g" README.md
          fi
          
          # Update last updated section if it exists
          if grep -q "Last Updated:" README.md; then
            sed -i "s/Last Updated:.*/Last Updated: $current_date/g" README.md
          else
            # Add last updated section to the top
            sed -i '1i> **📋 Last Updated**: '"$current_date"' | **📦 Version**: ${{ needs.setup-and-lint.outputs.version }}\n' README.md
          fi
          
          # Update workflow status badges if they exist
          sed -i 's/\(workflows\/.*\/badge\.svg\)/\1?branch=main/g' README.md
          
          echo "📊 README Update Results:"
          echo "========================"
          if diff -q README.md README.md.backup > /dev/null; then
            echo "ℹ️ No changes needed to README"
          else
            echo "✅ README updated with latest information"
            echo "📝 Changes made:"
            diff README.md.backup README.md || true
          fi

      - name: 💾 Commit README changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "📝 Auto-update README with latest project info [skip ci]"
            git push
            echo "✅ README changes committed and pushed"
          else
            echo "ℹ️ No README changes to commit"
          fi

  deployment-trigger:
    name: Deployment Automation
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: >
      always() && 
      needs.build.result == 'success' && 
      needs.security-scan.result == 'success' &&
      (github.event_name == 'release' || 
       (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    
    steps:
      - name: 🚀 Trigger deployment workflow
        run: |
          echo "🚀 Deployment Trigger Analysis"
          echo "=============================="
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Version: ${{ needs.setup-and-lint.outputs.version }}"
          echo "Should Deploy: ${{ needs.setup-and-lint.outputs.should-deploy }}"
          
          deployment_target="${{ github.event.inputs.deployment_target || 'staging' }}"
          if [[ "${{ github.event_name }}" == "release" ]]; then
            deployment_target="production"
          fi
          
          echo "Deployment Target: $deployment_target"
          echo "Deployment Status: ✅ Ready for deployment"
          
          # Here you could trigger actual deployment workflows
          # For now, we'll just log the deployment readiness

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [setup-and-lint, test, gemini-code-review, security-scan, build, update-readme, deployment-trigger]
    if: always()
    
    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "# 🎯 Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Enhanced CI/CD with Gemini Integration" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.setup-and-lint.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup & Lint | ${{ needs.setup-and-lint.result }} | Code quality checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} | Unit & integration tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Gemini Review | ${{ needs.gemini-code-review.result }} | AI-powered code review |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | Vulnerability analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | Application build |" >> $GITHUB_STEP_SUMMARY
          echo "| README Update | ${{ needs.update-readme.result }} | Documentation sync |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deployment-trigger.result }} | Deployment readiness |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔗 Artifacts & Reports" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Lint Results: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Test Results: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security Scan: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 Gemini Review: Available as PR comments (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          overall_status="success"
          if [[ "${{ needs.setup-and-lint.result }}" != "success" ]] || 
             [[ "${{ needs.test.result }}" != "success" && "${{ needs.test.result }}" != "skipped" ]] ||
             [[ "${{ needs.security-scan.result }}" != "success" ]] ||
             [[ "${{ needs.build.result }}" != "success" ]]; then
            overall_status="failure"
          fi
          
          if [[ "$overall_status" == "success" ]]; then
            echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All critical jobs completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Status: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical jobs failed. Please review the results." >> $GITHUB_STEP_SUMMARY
          fi