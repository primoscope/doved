name: 🚀 One-Click Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment Target'
        required: true
        default: 'digitalocean-app-platform'
        type: choice
        options:
        - digitalocean-app-platform
        - digitalocean-droplet
        - docker-hub
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      enable_monitoring:
        description: 'Enable Health Monitoring'
        required: true
        default: true
        type: boolean

  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'app.yaml'

  pull_request:
    branches: [ main ]
    types: [closed]
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'
  APP_NAME: 'echotune-ai'

jobs:
  # Build and test job
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        npm ci --only=production
        if [ -f requirements-production.txt ]; then
          pip install -r requirements-production.txt
        fi
        
    - name: 🧪 Run Health Checks
      run: |
        npm run health-check || echo "Health check will be performed post-deployment"
        
    - name: 🏗️ Test Docker Build
      run: |
        docker build -t ${{ env.APP_NAME }}:test .
        echo "✅ Docker build successful"
        
    outputs:
      build-success: ${{ job.status == 'success' }}

  # Deploy to DigitalOcean App Platform
  deploy-app-platform:
    name: 🌊 Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      (github.event.inputs.deploy_target == 'digitalocean-app-platform' || 
       github.event_name == 'push' || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ env.APP_NAME }}.ondigitalocean.app
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Install DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: 🚀 Deploy to App Platform
      run: |
        echo "🌊 Deploying EchoTune AI to DigitalOcean App Platform..."
        
        # Update app.yaml with dynamic values
        sed -i "s/repo: dzp5103\/Spotify-echo/repo: ${{ github.repository }}/g" app.yaml
        sed -i "s/branch: main/branch: ${{ github.ref_name }}/g" app.yaml
        
        # Create or update the app
        if doctl apps list | grep -q ${{ env.APP_NAME }}; then
          echo "📝 Updating existing app..."
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep ${{ env.APP_NAME }} | awk '{print $1}')
          doctl apps update $APP_ID --spec app.yaml --wait
        else
          echo "🆕 Creating new app..."
          doctl apps create --spec app.yaml --wait
        fi
        
        echo "✅ Deployment completed!"
        
    - name: 🔍 Get App Information
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep ${{ env.APP_NAME }} | awk '{print $1}')
        APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
        echo "🌐 Application URL: $APP_URL"
        echo "APP_URL=$APP_URL" >> $GITHUB_ENV
        
    - name: 🏥 Health Check
      if: github.event.inputs.enable_monitoring != 'false'
      run: |
        echo "🔍 Performing health check..."
        sleep 30  # Wait for deployment to stabilize
        
        for i in {1..10}; do
          if curl -f -s "${{ env.APP_URL }}/health" > /dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Attempt $i/10 - waiting for app to be ready..."
            sleep 15
          fi
        done

  # Deploy to DigitalOcean Droplet
  deploy-droplet:
    name: 💧 Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      github.event.inputs.deploy_target == 'digitalocean-droplet'
    
    environment:
      name: droplet-${{ github.event.inputs.environment || 'production' }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}
        
    - name: 🚀 Deploy to Droplet
      run: |
        echo "💧 Deploying to DigitalOcean Droplet..."
        
        # Copy deployment script to droplet
        scp -o StrictHostKeyChecking=no deploy-one-click.sh root@${{ secrets.DROPLET_IP }}:/tmp/
        
        # Execute deployment on droplet
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
          chmod +x /tmp/deploy-one-click.sh
          /tmp/deploy-one-click.sh
        EOF
        
        echo "✅ Droplet deployment completed!"

  # Deploy to Docker Hub
  deploy-docker:
    name: 🐳 Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      github.event.inputs.deploy_target == 'docker-hub'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          
    - name: 📝 Create Docker Run Command
      run: |
        echo "🐳 Docker image published successfully!"
        echo ""
        echo "🚀 Quick Deploy Command:"
        echo "docker run -d -p 3000:3000 --name echotune-ai ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest"
        echo ""
        echo "🔧 With custom environment:"
        echo "docker run -d -p 3000:3000 \\"
        echo "  -e SPOTIFY_CLIENT_ID=your_client_id \\"
        echo "  -e SPOTIFY_CLIENT_SECRET=your_client_secret \\"
        echo "  -e GEMINI_API_KEY=your_gemini_key \\"
        echo "  --name echotune-ai ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest"

  # Post-deployment verification
  post-deploy-check:
    name: ✅ Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: [deploy-app-platform, deploy-droplet, deploy-docker]
    if: always() && (needs.deploy-app-platform.result == 'success' || needs.deploy-droplet.result == 'success' || needs.deploy-docker.result == 'success')
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 EchoTune AI Deployment Summary"
        echo "================================="
        echo ""
        echo "✅ Build Status: ${{ needs.build-and-test.result }}"
        echo "✅ App Platform: ${{ needs.deploy-app-platform.result || 'skipped' }}"
        echo "✅ Droplet: ${{ needs.deploy-droplet.result || 'skipped' }}"
        echo "✅ Docker Hub: ${{ needs.deploy-docker.result || 'skipped' }}"
        echo ""
        echo "🌐 Access your application:"
        echo "- App Platform: https://${{ env.APP_NAME }}.ondigitalocean.app"
        if [ "${{ secrets.DROPLET_IP }}" ]; then
          echo "- Droplet: http://${{ secrets.DROPLET_IP }}:3000"
        fi
        echo "- Docker: Follow the docker run command from previous step"
        echo ""
        echo "🎵 Enjoy your AI-powered music discovery platform!"

    - name: 📝 Create Deployment Badge
      run: |
        # Update README with deployment status
        DEPLOY_STATUS="success"
        DEPLOY_DATE=$(date '+%Y-%m-%d')
        
        echo "![Deployment Status](https://img.shields.io/badge/deployment-$DEPLOY_STATUS-green?style=for-the-badge&logo=digitalocean)" > deployment-status.md
        echo "Last deployed: $DEPLOY_DATE" >> deployment-status.md

  # Cleanup on failure
  cleanup-on-failure:
    name: 🧹 Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: [deploy-app-platform, deploy-droplet, deploy-docker]
    if: failure()
    
    steps:
    - name: 🚨 Deployment Failed Notification
      run: |
        echo "❌ Deployment failed! Check the logs above for details."
        echo ""
        echo "🔍 Common issues:"
        echo "- Missing secrets (DIGITALOCEAN_ACCESS_TOKEN, DOCKER_PASSWORD, etc.)"
        echo "- Network connectivity problems"
        echo "- Insufficient resources on target platform"
        echo "- Configuration errors in app.yaml"
        echo ""
        echo "💡 Next steps:"
        echo "1. Check the Action logs for specific error messages"
        echo "2. Verify all required secrets are configured"
        echo "3. Test deployment locally first"
        echo "4. Use the manual deploy script: ./deploy-one-click.sh"