# EchoTune AI - Nginx Production Configuration Template
# Optimized for performance, security, and SSL with Let's Encrypt
# Replace variables before deployment: ${DOMAIN}, ${APP_HOST}, ${APP_PORT}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=${API_RATE_LIMIT:-10r/s};
limit_req_zone $binary_remote_addr zone=auth:10m rate=${AUTH_RATE_LIMIT:-5r/m};
limit_req_zone $binary_remote_addr zone=general:10m rate=${GENERAL_RATE_LIMIT:-100r/m};

# Upstream application servers
upstream app_backend {
    server ${APP_HOST:-localhost}:${APP_PORT:-3000} max_fails=3 fail_timeout=30s;
    # Add more servers for load balancing:
    # server app2:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN} ${WWW_DOMAIN:-www.${DOMAIN}};
    
    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN} ${WWW_DOMAIN:-www.${DOMAIN}};
    
    # SSL Configuration
    ssl_certificate ${SSL_CERT_PATH:-/etc/letsencrypt/live/${DOMAIN}/fullchain.pem};
    ssl_certificate_key ${SSL_KEY_PATH:-/etc/letsencrypt/live/${DOMAIN}/privkey.pem};
    ssl_trusted_certificate ${SSL_CERT_PATH:-/etc/letsencrypt/live/${DOMAIN}/chain.pem};
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://apis.google.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.spotify.com wss: https:; media-src 'self' https:;" always;
    
    # Remove server tokens
    server_tokens off;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Access and Error Logs
    access_log ${ACCESS_LOG_PATH:-/var/log/nginx/echotune_access.log} combined;
    error_log ${ERROR_LOG_PATH:-/var/log/nginx/echotune_error.log} warn;
    
    # Root directory for static files
    root /var/www/html;
    
    # Static file serving with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri @app;
    }
    
    # API endpoints with stricter rate limiting
    location /api/ {
        limit_req zone=api burst=${API_BURST:-20} nodelay;
        limit_req_status 429;
        
        # Proxy configuration
        proxy_pass http://app_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # Cache bypass
        proxy_cache_bypass $http_upgrade;
    }
    
    # Authentication endpoints with very strict rate limiting
    location /auth/ {
        limit_req zone=auth burst=${AUTH_BURST:-5} nodelay;
        limit_req_status 429;
        
        proxy_pass http://app_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # WebSocket support for Socket.IO
    location /socket.io/ {
        limit_req zone=general burst=${GENERAL_BURST:-50} nodelay;
        
        proxy_pass http://app_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Health check endpoint (no rate limiting)
    location = /health {
        proxy_pass http://app_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Quick timeouts for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        # Add health check headers
        add_header X-Health-Check "nginx-proxy" always;
    }
    
    # Main application with general rate limiting
    location / {
        limit_req zone=general burst=${GENERAL_BURST:-50} nodelay;
        
        # Try static files first, then proxy to app
        try_files $uri @app;
    }
    
    # Fallback location for all requests
    location @app {
        proxy_pass http://app_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        proxy_cache_bypass $http_upgrade;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|log|config)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /auth/\nAllow: /\n";
    }
}

# Optional: Separate configuration for www subdomain redirect
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.${DOMAIN};
    
    # Use same SSL certificate
    ssl_certificate ${SSL_CERT_PATH:-/etc/letsencrypt/live/${DOMAIN}/fullchain.pem};
    ssl_certificate_key ${SSL_KEY_PATH:-/etc/letsencrypt/live/${DOMAIN}/privkey.pem};
    
    # Redirect www to non-www
    return 301 https://${DOMAIN}$request_uri;
}

# Security: Drop requests for unknown hosts
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    
    # Dummy SSL certificate for unknown hosts
    ssl_certificate ${SSL_CERT_PATH:-/etc/letsencrypt/live/${DOMAIN}/fullchain.pem};
    ssl_certificate_key ${SSL_KEY_PATH:-/etc/letsencrypt/live/${DOMAIN}/privkey.pem};
    
    server_name _;
    return 444;
}