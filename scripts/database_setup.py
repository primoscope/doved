#!/usr/bin/env python3
"""
Database Setup and Configuration Helper for EchoTune AI
Provides utilities for setting up databases and managing configurations
"""

import os
import sys
import json
import argparse
import logging
from typing import Dict, Optional
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DatabaseSetupHelper:
    """Helper class for database setup and configuration"""
    
    def __init__(self):
        self.config_file = '.env'
        self.config = {}
        self.load_existing_config()
    
    def load_existing_config(self):
        """Load existing configuration from .env file"""
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        self.config[key] = value
    
    def save_config(self):
        """Save configuration to .env file"""
        with open(self.config_file, 'w') as f:
            f.write("# EchoTune AI Database Configuration\n")
            f.write("# Generated by database setup helper\n\n")
            
            # Group configurations
            groups = {
                'Spotify API': ['SPOTIFY_CLIENT_ID', 'SPOTIFY_CLIENT_SECRET', 'SPOTIFY_REDIRECT_URI'],
                'MongoDB': ['MONGODB_URI', 'MONGODB_DATABASE', 'MONGODB_COLLECTION'],
                'Supabase': ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'SUPABASE_SERVICE_ROLE_KEY', 'DATABASE_URL'],
                'Digital Ocean': ['DO_DATABASE_URL', 'DO_SPACES_KEY', 'DO_SPACES_SECRET'],
                'General': ['ENVIRONMENT', 'LOG_LEVEL', 'DEBUG']
            }
            
            for group_name, keys in groups.items():
                f.write(f"# {group_name}\n")
                for key in keys:
                    value = self.config.get(key, '')
                    f.write(f"{key}={value}\n")
                f.write("\n")
    
    def setup_mongodb_config(self):
        """Interactive MongoDB setup"""
        print("\nüçÉ MongoDB Atlas Setup")
        print("="*50)
        
        print("1. Go to https://cloud.mongodb.com")
        print("2. Create a new project called 'EchoTune-AI'")
        print("3. Create a new cluster (M0 Free tier for development)")
        print("4. Create a database user with read/write permissions")
        print("5. Whitelist your IP address (0.0.0.0/0 for development)")
        print("6. Get your connection string")
        
        connection_string = input("\nEnter your MongoDB connection string: ").strip()
        if connection_string:
            self.config['MONGODB_URI'] = connection_string
            self.config['MONGODB_DATABASE'] = input("Database name [spotify_analytics]: ").strip() or 'spotify_analytics'
            self.config['MONGODB_COLLECTION'] = input("Collection name [listening_history]: ").strip() or 'listening_history'
            
            print("‚úÖ MongoDB configuration saved!")
        else:
            print("‚ùå No connection string provided")
    
    def setup_supabase_config(self):
        """Interactive Supabase setup"""
        print("\n‚ö° Supabase Setup")
        print("="*50)
        
        print("1. Go to https://supabase.com")
        print("2. Create a new project called 'echotune-ai'")
        print("3. Go to Settings > API")
        print("4. Copy your Project URL and API keys")
        print("5. Go to Settings > Database and copy the connection string")
        
        project_url = input("\nEnter your Supabase Project URL: ").strip()
        if project_url:
            self.config['SUPABASE_URL'] = project_url
            self.config['SUPABASE_ANON_KEY'] = input("Anon (public) API key: ").strip()
            self.config['SUPABASE_SERVICE_ROLE_KEY'] = input("Service role (secret) API key: ").strip()
            self.config['DATABASE_URL'] = input("Database connection string: ").strip()
            
            print("‚úÖ Supabase configuration saved!")
        else:
            print("‚ùå No project URL provided")
    
    def setup_digitalocean_config(self):
        """Interactive Digital Ocean setup"""
        print("\nüåä Digital Ocean Setup")
        print("="*50)
        
        print("1. Go to https://cloud.digitalocean.com")
        print("2. Create a new Managed Database (PostgreSQL recommended)")
        print("3. Create a new Spaces bucket for file storage (optional)")
        print("4. Go to API > Personal Access Tokens to create API keys")
        
        db_url = input("\nEnter your DO Database connection string: ").strip()
        if db_url:
            self.config['DO_DATABASE_URL'] = db_url
            
            setup_spaces = input("Set up Spaces for file storage? (y/n): ").strip().lower()
            if setup_spaces == 'y':
                self.config['DO_SPACES_KEY'] = input("Spaces access key: ").strip()
                self.config['DO_SPACES_SECRET'] = input("Spaces secret key: ").strip()
            
            print("‚úÖ Digital Ocean configuration saved!")
        else:
            print("‚ùå No database URL provided")
    
    def setup_spotify_config(self):
        """Interactive Spotify API setup"""
        print("\nüéµ Spotify API Setup")
        print("="*50)
        
        print("1. Go to https://developer.spotify.com/dashboard")
        print("2. Create a new app called 'EchoTune AI'")
        print("3. Set the redirect URI to: http://localhost:8080/callback")
        print("4. Copy your Client ID and Client Secret")
        
        client_id = input("\nEnter your Spotify Client ID: ").strip()
        if client_id:
            self.config['SPOTIFY_CLIENT_ID'] = client_id
            self.config['SPOTIFY_CLIENT_SECRET'] = input("Spotify Client Secret: ").strip()
            self.config['SPOTIFY_REDIRECT_URI'] = input("Redirect URI [http://localhost:8080/callback]: ").strip() or 'http://localhost:8080/callback'
            
            print("‚úÖ Spotify API configuration saved!")
        else:
            print("‚ùå No client ID provided")
    
    def test_connections(self):
        """Test database connections"""
        print("\nüîç Testing Database Connections")
        print("="*50)
        
        # Test MongoDB
        if self.config.get('MONGODB_URI'):
            try:
                import pymongo
                client = pymongo.MongoClient(self.config['MONGODB_URI'])
                client.admin.command('ismaster')
                print("‚úÖ MongoDB connection successful")
                client.close()
            except Exception as e:
                print(f"‚ùå MongoDB connection failed: {e}")
        
        # Test Supabase/PostgreSQL
        if self.config.get('DATABASE_URL'):
            try:
                import psycopg2
                conn = psycopg2.connect(self.config['DATABASE_URL'])
                cursor = conn.cursor()
                cursor.execute("SELECT 1")
                conn.close()
                print("‚úÖ Supabase/PostgreSQL connection successful")
            except Exception as e:
                print(f"‚ùå Supabase/PostgreSQL connection failed: {e}")
        
        # Test Spotify API
        if self.config.get('SPOTIFY_CLIENT_ID') and self.config.get('SPOTIFY_CLIENT_SECRET'):
            try:
                import requests
                import base64
                
                auth_header = base64.b64encode(
                    f"{self.config['SPOTIFY_CLIENT_ID']}:{self.config['SPOTIFY_CLIENT_SECRET']}".encode()
                ).decode()
                
                response = requests.post(
                    'https://accounts.spotify.com/api/token',
                    headers={'Authorization': f'Basic {auth_header}'},
                    data={'grant_type': 'client_credentials'}
                )
                
                if response.status_code == 200:
                    print("‚úÖ Spotify API connection successful")
                else:
                    print(f"‚ùå Spotify API connection failed: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå Spotify API connection failed: {e}")
    
    def generate_sample_commands(self):
        """Generate sample commands for database operations"""
        print("\nüìã Sample Database Commands")
        print("="*50)
        
        print("# Populate missing audio features:")
        print("python scripts/populate_audio_features.py --input data/spotify_listening_history_combined.csv")
        print()
        
        print("# Migrate to MongoDB:")
        print("python scripts/migrate_to_mongodb.py --input data/spotify_listening_history_combined.csv")
        print()
        
        print("# Migrate to Supabase:")
        print("python scripts/migrate_to_supabase.py --input data/spotify_listening_history_combined.csv")
        print()
        
        print("# Test audio features population with mock data:")
        print("python scripts/populate_audio_features.py --mock --input data/spotify_listening_history_combined.csv")
        print()
    
    def run_interactive_setup(self):
        """Run interactive database setup"""
        print("üéØ EchoTune AI Database Setup Wizard")
        print("="*60)
        
        while True:
            print("\nSelect a database platform to configure:")
            print("1. MongoDB Atlas (for analytics and ML)")
            print("2. Supabase (for application data)")
            print("3. Digital Ocean (for production)")
            print("4. Spotify API (for audio features)")
            print("5. Test all connections")
            print("6. Generate sample commands")
            print("7. Save configuration and exit")
            print("0. Exit without saving")
            
            choice = input("\nEnter your choice (0-7): ").strip()
            
            if choice == '1':
                self.setup_mongodb_config()
            elif choice == '2':
                self.setup_supabase_config()
            elif choice == '3':
                self.setup_digitalocean_config()
            elif choice == '4':
                self.setup_spotify_config()
            elif choice == '5':
                self.test_connections()
            elif choice == '6':
                self.generate_sample_commands()
            elif choice == '7':
                self.save_config()
                print("\n‚úÖ Configuration saved to .env file")
                break
            elif choice == '0':
                print("\n‚ùå Exiting without saving")
                break
            else:
                print("‚ùå Invalid choice, please try again")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='Database setup helper for EchoTune AI')
    parser.add_argument('--interactive', '-i', action='store_true',
                       help='Run interactive setup wizard')
    parser.add_argument('--test', '-t', action='store_true',
                       help='Test existing database connections')
    parser.add_argument('--commands', '-c', action='store_true',
                       help='Generate sample database commands')
    
    args = parser.parse_args()
    
    helper = DatabaseSetupHelper()
    
    if args.interactive:
        helper.run_interactive_setup()
    elif args.test:
        helper.test_connections()
    elif args.commands:
        helper.generate_sample_commands()
    else:
        # Show help by default
        print("üéØ EchoTune AI Database Setup Helper")
        print("="*50)
        print()
        print("Use --interactive to run the setup wizard")
        print("Use --test to test existing connections")
        print("Use --commands to see sample database commands")
        print()
        print("For more information, see DATABASE_ARCHITECTURE_GUIDE.md")

if __name__ == "__main__":
    main()