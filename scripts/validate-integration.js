#!/usr/bin/env node

/**
 * Phase 3B Integration Validation Script
 * Tests all integrated APIs and production configurations
 */

require('dotenv').config();
const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function validateIntegration() {
    console.log('üöÄ Phase 3B Integration Validation');
    console.log('==================================');
    
    const results = {
        spotify: false,
        gemini: false,
        providers: false,
        database: false,
        health: false
    };
    
    try {
        // Test 1: Spotify Authentication
        console.log('\n1Ô∏è‚É£ Testing Spotify Authentication...');
        if (process.env.SPOTIFY_CLIENT_ID && process.env.SPOTIFY_CLIENT_SECRET) {
            const spotifyAuth = await axios.post(
                'https://accounts.spotify.com/api/token',
                'grant_type=client_credentials',
                {
                    headers: {
                        'Authorization': 'Basic ' + Buffer.from(`${process.env.SPOTIFY_CLIENT_ID}:${process.env.SPOTIFY_CLIENT_SECRET}`).toString('base64'),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );
            
            if (spotifyAuth.data.access_token) {
                console.log('   ‚úÖ Spotify API authentication successful');
                console.log(`   üîë Client ID: ${process.env.SPOTIFY_CLIENT_ID.substring(0, 8)}...`);
                results.spotify = true;
            }
        } else {
            console.log('   ‚ùå Spotify credentials not found');
        }
        
        // Test 2: Gemini Provider
        console.log('\n2Ô∏è‚É£ Testing Gemini LLM Provider...');
        const chatResponse = await axios.post(`${BASE_URL}/api/chat/message`, {
            message: "Test: Please respond with just 'Gemini provider working' to confirm functionality.",
            sessionId: "validation-test"
        }, { timeout: 10000 });
        
        if (chatResponse.data.success && chatResponse.data.provider === 'gemini') {
            console.log('   ‚úÖ Gemini provider responding successfully');
            console.log(`   ü§ñ Model: ${chatResponse.data.model}`);
            console.log(`   ‚è±Ô∏è Response time: ${chatResponse.data.responseTime}ms`);
            results.gemini = true;
        } else {
            console.log('   ‚ö†Ô∏è Gemini provider not active, checking fallback...');
            if (chatResponse.data.success) {
                console.log(`   üîÑ Fallback provider (${chatResponse.data.provider}) working`);
            }
        }
        
        // Test 3: Provider Status
        console.log('\n3Ô∏è‚É£ Testing Provider Management...');
        const providerStatus = await axios.get(`${BASE_URL}/api/providers/status`);
        
        if (providerStatus.data.success) {
            const { activeProviders, totalProviders, keyPool, statistics } = providerStatus.data;
            console.log('   ‚úÖ Provider management operational');
            console.log(`   üìä Active providers: ${activeProviders}/${totalProviders}`);
            console.log(`   üîë Key pools: OpenRouter(${keyPool.openrouter.total}), Gemini(${keyPool.gemini.total})`);
            console.log(`   üìà Success rate: ${statistics.requests > 0 ? ((statistics.successes / statistics.requests) * 100).toFixed(1) : 'N/A'}%`);
            results.providers = true;
        }
        
        // Test 4: Database Status
        console.log('\n4Ô∏è‚É£ Testing Database Integration...');
        const healthCheck = await axios.get(`${BASE_URL}/health`);
        
        if (healthCheck.data.status === 'healthy') {
            const dbStatus = healthCheck.data.dependencies.database;
            console.log('   ‚úÖ Database system operational');
            console.log(`   üóÑÔ∏è Connection type: ${dbStatus.details.connectionType}`);
            console.log(`   üîÑ Fallback available: ${dbStatus.details.fallbackAvailable}`);
            console.log(`   üè• Health status: ${dbStatus.status}`);
            results.database = true;
        }
        
        // Test 5: Overall Health
        console.log('\n5Ô∏è‚É£ Testing System Health...');
        if (healthCheck.data.status === 'healthy') {
            console.log('   ‚úÖ Overall system health: HEALTHY');
            console.log(`   üíæ Memory usage: ${(healthCheck.data.memory.heapUsed / 1024 / 1024).toFixed(2)} MB`);
            console.log(`   ‚è±Ô∏è Uptime: ${healthCheck.data.uptime.toFixed(1)} seconds`);
            results.health = true;
        }
        
        // Summary
        console.log('\nüìã Integration Summary');
        console.log('======================');
        const successful = Object.values(results).filter(Boolean).length;
        const total = Object.keys(results).length;
        
        Object.entries(results).forEach(([test, passed]) => {
            console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${test.charAt(0).toUpperCase() + test.slice(1)}: ${passed ? 'PASS' : 'FAIL'}`);
        });
        
        console.log(`\nüéØ Overall Score: ${successful}/${total} (${((successful/total) * 100).toFixed(1)}%)`);
        
        if (successful === total) {
            console.log('\nüéâ ALL SYSTEMS OPERATIONAL - Production Ready!');
            console.log('üåê Access the application: http://localhost:3000');
        } else {
            console.log('\n‚ö†Ô∏è Some systems need attention, but core functionality is operational');
        }
        
    } catch (error) {
        console.error('\n‚ùå Validation error:', error.message);
        if (error.response) {
            console.error(`   Status: ${error.response.status}`);
            console.error(`   Data: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }
}

if (require.main === module) {
    validateIntegration().catch(console.error);
}

module.exports = { validateIntegration };