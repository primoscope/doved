# CI/CD Workflow Optimizer
filename: workflow-optimizer
description: Analyzes and optimizes GitHub Actions workflows for performance, reliability, and best practices
version: "1.0.0"
category: workflow
tags: [cicd, github-actions, optimization, devops, performance]

# Model Configuration
model: gpt-4o
modelParameters:
  temperature: 0.3
  max_tokens: 4000
  top_p: 0.9

# Variables
variables:
  projectType:
    type: string
    description: Type of project (e.g., Node.js, TypeScript, Python)
    required: true
  currentIssues:
    type: string
    description: Current issues with the workflow
    required: true
  performanceGoals:
    type: string
    description: Performance goals and targets
    required: true
  securityRequirements:
    type: string
    description: Security requirements and constraints
    required: true
  currentWorkflow:
    type: string
    description: Current GitHub Actions workflow YAML content
    required: true
  dependencies:
    type: string
    description: Project dependencies and package managers
    required: false
    default: "npm"
  buildTools:
    type: string
    description: Build tools and compilation steps
    required: false
    default: "Standard build process"
  testingFramework:
    type: string
    description: Testing framework and test execution
    required: false
    default: "Jest"
  deploymentTarget:
    type: string
    description: Deployment target and platform
    required: false
    default: "Production server"

# Prompt Messages
messages:
  - role: system
    content: |
      You are a DevOps expert specializing in GitHub Actions workflow optimization for modern software projects.
      
      Focus on these key areas:
      1. **Performance**: Build speed, caching strategies, parallel execution
      2. **Reliability**: Error handling, retry mechanisms, conditional execution
      3. **Security**: Secret management, permission scoping, vulnerability scanning
      4. **Cost Optimization**: Resource usage, runner selection, job efficiency
      5. **Maintainability**: Workflow organization, reusable actions, documentation
      6. **Modern Practices**: Latest action versions, best practices, compliance
      
      Provide specific, actionable workflow improvements with clear explanations.
      
      Output Format:
      1. Analysis of current workflow issues
      2. Specific optimization recommendations
      3. Optimized workflow YAML
      4. Performance and security benefits
      5. Implementation guidance
      
  - role: user
    content: |
      Optimize the following GitHub Actions workflow:
      
      **Project Type:** {{projectType}}
      **Current Issues:** {{currentIssues}}
      **Performance Goals:** {{performanceGoals}}
      **Security Requirements:** {{securityRequirements}}
      
      **Current Workflow:**
      ```yaml
      {{currentWorkflow}}
      ```
      
      **Project Context:**
      - **Dependencies:** {{dependencies}}
      - **Build Tools:** {{buildTools}}
      - **Testing Framework:** {{testingFramework}}
      - **Deployment Target:** {{deploymentTarget}}
      
      Please analyze and optimize for:
      - Build performance and caching
      - Parallel execution opportunities
      - Security and permission optimization
      - Error handling and reliability
      - Cost-effective resource usage
      - Modern action versions and best practices
      
      Provide optimized workflow with detailed explanations.

# Test Data
testData:
  - variables:
      projectType: "TypeScript PDF Generation Service"
      currentIssues: "Slow builds, no caching, sequential jobs, outdated actions"
      performanceGoals: "Sub-5 minute CI/CD pipeline, efficient caching, parallel testing"
      securityRequirements: "Minimal permissions, secret scanning, dependency auditing"
      dependencies: "npm, TypeScript, ESLint, Jest, PDFKit"
      buildTools: "TypeScript compiler, npm scripts"
      testingFramework: "Jest with custom test files"
      deploymentTarget: "Docker container to production"
      currentWorkflow: |
        name: CI/CD Pipeline
        
        on:
          push:
            branches: [ main ]
          pull_request:
            branches: [ main ]
        
        jobs:
          test:
            runs-on: ubuntu-latest
            steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                node-version: '18'
            - run: npm install
            - run: npm run lint
            - run: npm run build
            - run: npm test
            
          deploy:
            needs: test
            runs-on: ubuntu-latest
            if: github.ref == 'refs/heads/main'
            steps:
            - uses: actions/checkout@v2
            - run: docker build -t app .
            - run: docker push app
    expected: "Should contain optimized workflow with caching, parallel jobs, and security improvements"

# Validation Rules
evaluators:
  - name: Contains caching strategy
    string:
      contains: "cache"
  - name: Uses modern action versions
    string:
      contains: "@v4"
  - name: Includes security improvements
    string:
      contains: "security"
  - name: Mentions parallel execution
    string:
      contains: "parallel"
  - name: Comprehensive analysis
    string:
      length_min: 1000

# Metadata
metadata:
  author: "EchoTune AI Team"
  created: "2024-01-01T00:00:00Z"
  updated: "2024-01-01T00:00:00Z"
  license: "MIT"
  dependencies: []
  migrated_from: ".github/workflows/prompts/workflow-optimizer.yml"